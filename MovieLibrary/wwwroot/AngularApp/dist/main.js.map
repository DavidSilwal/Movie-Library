{"version":3,"sources":["webpack:///./AngularApp/$_lazy_route_resource lazy namespace object","webpack:///./AngularApp/app/app.component.css","webpack:///./AngularApp/app/app.component.html","webpack:///./AngularApp/app/app.component.ts","webpack:///./AngularApp/app/app.module.ts","webpack:///./AngularApp/app/shared/auth.guard.ts","webpack:///./AngularApp/app/shared/data.service.ts","webpack:///./AngularApp/app/shared/login.service.ts","webpack:///./AngularApp/app/shared/movieItem.ts","webpack:///./AngularApp/app/shared/movieOrder.ts","webpack:///./AngularApp/app/store/movie-cart/movie-cart.component.css","webpack:///./AngularApp/app/store/movie-cart/movie-cart.component.html","webpack:///./AngularApp/app/store/movie-cart/movie-cart.component.ts","webpack:///./AngularApp/app/store/movie-checkout/movie-checkout.component.css","webpack:///./AngularApp/app/store/movie-checkout/movie-checkout.component.html","webpack:///./AngularApp/app/store/movie-checkout/movie-checkout.component.ts","webpack:///./AngularApp/app/store/movie-list/movie-list.component.css","webpack:///./AngularApp/app/store/movie-list/movie-list.component.html","webpack:///./AngularApp/app/store/movie-list/movie-list.component.ts","webpack:///./AngularApp/app/store/movie-login/movie-login.component.css","webpack:///./AngularApp/app/store/movie-login/movie-login.component.html","webpack:///./AngularApp/app/store/movie-login/movie-login.component.ts","webpack:///./AngularApp/app/store/movie-shop/movie-shop.component.css","webpack:///./AngularApp/app/store/movie-shop/movie-shop.component.html","webpack:///./AngularApp/app/store/movie-shop/movie-shop.component.ts","webpack:///./AngularApp/environments/environment.ts","webpack:///./AngularApp/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./AngularApp/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Movie Library';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { MovieListComponent } from './store/movie-list/movie-list.component';\nimport { MovieCartComponent } from './store/movie-cart/movie-cart.component';\n\nimport { MovieShopComponent } from './store/movie-shop/movie-shop.component';\nimport { MovieCheckoutComponent } from './store/movie-checkout/movie-checkout.component';\nimport { MovieLoginComponent } from './store/movie-login/movie-login.component';\nimport { AuthGuard } from 'AngularApp/app/shared/auth.guard';\n\nlet routes = [\n    { path: \"\", component: MovieShopComponent },\n    { path: \"checkout\", component: MovieCheckoutComponent, canActivate: [AuthGuard] },\n    { path: \"login\", component: MovieLoginComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MovieListComponent,\n    MovieCartComponent,\n    MovieShopComponent,\n    MovieCheckoutComponent,\n    MovieLoginComponent\n  ],\n  imports: [\n      BrowserModule,\n      HttpClientModule,\n      RouterModule.forRoot(routes, { useHash: true }),\n      FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginService } from 'AngularApp/app/shared/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n    constructor(private loginService: LoginService) {  }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return this.loginService.isUserLoggedIn();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError, Observable } from \"rxjs\";\r\nimport { Movie } from '../shared/movie';\r\nimport { MovieOrder } from '../shared/movieOrder';\r\nimport { MovieItem } from '../shared/movieItem';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n    public movieItems: Movie[] = [];\r\n    public movieOrder: MovieOrder = new MovieOrder();\r\n    private token: string = '';\r\n    private tokenExp: Date;\r\n    constructor(private http: HttpClient) { }\r\n\r\n    loadMovies(): Observable<boolean> {\r\n        return this.http.get(\"/api/movies\")\r\n            .pipe(\r\n            map((data: any[]) => {\r\n                this.movieItems = data;\r\n                return true;\r\n            }), catchError(error => {\r\n                return throwError('Unable to fetch record!');\r\n            }));\r\n    }\r\n\r\n    public get needLogin(): boolean {\r\n        return this.token.length === 0 || this.tokenExp > new Date();\r\n    }\r\n\r\n    login(loginDetails): Observable<boolean> {\r\n        return this.http.post('/account/CreateToken/', loginDetails)\r\n            .pipe(\r\n            map((data: any) => {\r\n                this.token = data.token;\r\n                this.tokenExp = data.expiration;\r\n                return true;\r\n            }));\r\n    }\r\n\r\n    checkout() {\r\n        if (!this.movieOrder.orderNumber) {\r\n            this.movieOrder.orderNumber = this.movieOrder.orderDateTime.getDate().toString() +\r\n                this.movieOrder.orderDateTime.getMilliseconds().toString();\r\n        }\r\n        return this.http.post('/api/Movieorders', this.movieOrder,\r\n            {\r\n                headers: new HttpHeaders().set('Authorization', 'Bearer ' + this.token)\r\n            })\r\n            .pipe(\r\n            map(res => {\r\n                this.movieOrder = new MovieOrder();\r\n                return true;\r\n            }));\r\n    }\r\n\r\n    addMovie(newMovie: Movie) {\r\n\r\n        let movieItem: MovieItem = this.movieOrder.items.find(i => i.movieId === newMovie.id);\r\n        if (movieItem) {\r\n            movieItem.quantity++;\r\n        }\r\n        else {\r\n            movieItem = new MovieItem();\r\n            movieItem.movieId = newMovie.id;\r\n            movieItem.movieActorName = newMovie.actorName;\r\n            movieItem.movieDirectorName = newMovie.directorName;\r\n            movieItem.movieGenre = newMovie.genre;\r\n            movieItem.movieMovieName = newMovie.movieName;\r\n            movieItem.movieReleaseDate = newMovie.releaseDate;\r\n            movieItem.price = newMovie.price;\r\n            movieItem.quantity = 1;\r\n\r\n            this.movieOrder.items.push(movieItem);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginService {\n\n    private isUserLoggedin;\n    private username;\n\n    constructor() {\n        this.isUserLoggedin = false;\n    }\n\n    setUserLoggedIn() {\n        this.isUserLoggedin = true;\n    }\n\n    isUserLoggedIn() {\n        return this.isUserLoggedin;\n    }\n}\n","﻿export class MovieItem {\r\n    id: number;\r\n    quantity: number;\r\n    price: number;\r\n    movieMovieName: string;\r\n    movieDirectorName: string;\r\n    movieReleaseDate: string;\r\n    movieActorName: string;\r\n    movieGenre: string;\r\n    movieId: number;\r\n}","﻿import { MovieItem } from \"./movieItem\";\r\nimport * as _ from 'lodash';\r\n\r\nexport class MovieOrder {\r\n    id: number;\r\n    orderDateTime: Date = new Date();\r\n    orderNumber: string;\r\n    items: Array<MovieItem> = new Array<MovieItem>();\r\n    get total(): number {\r\n       return _.sum(_.map(this.items, i=>i.price * i.quantity));\r\n    };\r\n}\r\n","module.exports = \"\"","module.exports = \"<h3>Movie Cart</h3>\\r\\nIndividual Movies Count: {{dataService.movieOrder.items.length}}\\r\\n<br />\\r\\nTotal: {{dataService.movieOrder.total | currency:\\\"USD\\\":true }}\\r\\n\\r\\n<table class=\\\"table table-condensed table-hover\\\">\\r\\n    <thead>\\r\\n        <tr>\\r\\n            <td>Movie</td>\\r\\n            <td>Director Name</td>\\r\\n            <td>Release Date</td>\\r\\n            <td>Unit Price</td>\\r\\n            <td>Quantity</td>\\r\\n            <td>Total</td>\\r\\n        </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n        <tr *ngFor=\\\"let m of dataService.movieOrder.items\\\">\\r\\n            <td>{{m.movieMovieName}}</td>\\r\\n            <td>{{m.movieDirectorName}}</td>\\r\\n            <td>{{m.movieReleaseDate}}</td>\\r\\n            <td>{{m.price | currency:\\\"USD\\\":true}}</td>\\r\\n            <td>{{m.quantity}}</td>\\r\\n            <td>{{(m.price * m.quantity) | currency:\\\"USD\\\":true}}</td>\\r\\n        </tr>\\r\\n    </tbody>\\r\\n</table>\\r\\n<a routerLink=\\\"checkout\\\" class=\\\"btn btn-success\\\" *ngIf=\\\"dataService.movieOrder.items.length > 0\\\" (click)=\\\"onChekout()\\\"> Checkout</a>\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from 'AngularApp/app/shared/data.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-movie-cart',\n  templateUrl: './movie-cart.component.html',\n  styleUrls: ['./movie-cart.component.css']\n})\nexport class MovieCartComponent implements OnInit {\n\n    constructor(private dataService: DataService, private router: Router) {\n        \n    }\n  ngOnInit() {\n  }\n\n    onChekout() {\n        //User is logged in or not\n        if (this.dataService.needLogin) {\n            //Redirect to login page\n            this.router.navigate(['login']);\n        } else {\n            //to checkout page\n            this.router.navigate(['checkout']);\n        }\n    }\n\n}\n","module.exports = \".img-thumb {\\r\\n    max-width: 100px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"errorMsg\\\">{{errorMsg}}</div>\\r\\n    <h3>Order Confirmation</h3>\\r\\n    <table class=\\\"table table-bordered table-hover\\\">\\r\\n        <tr *ngFor=\\\"let m of dataService.movieOrder.items\\\">\\r\\n            <td>\\r\\n                <a href=\\\"#\\\" target=\\\"_blank\\\"><img [src]=getImage(m) [alt]=\\\"m.movieMovieName\\\" class=\\\"img-thumbnail img-thumb\\\"></a>\\r\\n            </td>\\r\\n            <td>{{m.movieMovieName}}</td>\\r\\n            <td>{{m.movieDirectorName}}</td>\\r\\n            <td>{{m.movieReleaseDate}}</td>\\r\\n            <td>{{m.price | currency:\\\"USD\\\":true}}</td>\\r\\n            <td>{{m.quantity}}</td>\\r\\n            <td>{{(m.price * m.quantity) | currency:\\\"USD\\\":true}}</td>\\r\\n        </tr>\\r\\n    </table>\\r\\n    <div class=\\\"col-md-4 col-md-offset-8 text-right\\\">\\r\\n        <table class=\\\"table table-condensed\\\">\\r\\n            <tr>\\r\\n                <td class=\\\"text-right\\\">Total:</td>\\r\\n                <td class=\\\"text-right\\\">{{ dataService.movieOrder.total|currency:'USD':true }}</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n        <button class=\\\"btn btn-success\\\" (click)=\\\"onCheckout()\\\">Complete Order</button>\\r\\n        <a routerLink=\\\"/\\\" class=\\\"btn btn-danger\\\">Cancel</a>\\r\\n    </div>\\r\\n\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DataService } from 'AngularApp/app/shared/data.service';\n\n@Component({\n  selector: 'app-movie-checkout',\n  templateUrl: './movie-checkout.component.html',\n  styleUrls: ['./movie-checkout.component.css']\n})\nexport class MovieCheckoutComponent implements OnInit {\n\n    errorMsg:string = '';\n    constructor(private dataService: DataService, private router: Router) {\n\n    }\n\n  ngOnInit() {\n  }\n\n   getImage(result) {\n        if (result) {\n            return \"/assets/images/\" + result.movieMovieName + \".png\";\n        } else return \"/assets/images/notFound.png\";\n   }\n\n    onCheckout() {\n        this.dataService.checkout()\n            .subscribe(success => {\n                if (success) {\n                    this.router.navigate([\"/\"]);\n                }\n            }, error => this.errorMsg = \"Failed to save movie order!\")\n            \n    }\n    \n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div *ngFor=\\\"let m of movieItems\\\">\\r\\n        <div class=\\\"col-md-6 col-sm-6 highlight\\\">\\r\\n            <div class=\\\"well well-lg\\\">\\r\\n                <div class=\\\"h-body text-center\\\">\\r\\n                    <button class=\\\"btn btn-success\\\" (click)=\\\"addMovie(m)\\\"> Buy</button>\\r\\n                </div>\\r\\n                <div class=\\\"h-caption\\\">\\r\\n                    <h4><i class=\\\"fa fa-video-camera fa-5\\\"></i>{{m.movieName}}</h4>\\r\\n                </div>\\r\\n                <div class=\\\"h-body text-center\\\">\\r\\n                    <p>\\r\\n                        <a href=\\\"#\\\" target=\\\"_blank\\\"><img [src]=getImage(m) [alt]=\\\"m.movieName\\\" class=\\\"img-rounded\\\" width=\\\"600\\\" height=\\\"300\\\"></a>\\r\\n                    </p>\\r\\n                    <p>Director:- {{m.directorName}}</p>\\r\\n                    <p>Actor:- {{m.actorName}}</p>\\r\\n                    <p>Genre:- {{m.genre}}</p>\\r\\n                    <p>Release Date:- {{m.releaseDate}}</p>\\r\\n                    <p>Unit Price:- {{m.price | currency:'USD':true}}</p>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from 'AngularApp/app/shared/data.service';\nimport { Movie } from '../../shared/movie';\n\n@Component({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: ['./movie-list.component.css']\n})\nexport class MovieListComponent implements OnInit {\n\n    public movieItems: Movie[] = [];\n    constructor(private dataService: DataService) {\n       // this.movieItems = dataService.movieItems;\n    }\n\n    ngOnInit() {\n        this.dataService.loadMovies()\n            .subscribe(success => {\n                if (success) {\n                    this.movieItems = this.dataService.movieItems;\n                    console.log('Movie Items:-', this.movieItems);\n                }\n            });\n    }\n\n    getImage(result) {\n        if (result) {\n          return \"/assets/images/\" + result.movieName + \".png\";\n        } else return \"/assets/images/notFound.png\";\n    }\n\n    addMovie(m: Movie) {\n        this.dataService.addMovie(m);\n    }\n    \n }\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4 col-md-offset-4\\\">\\r\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"errorMsg\\\">{{errorMsg}}</div>\\r\\n        <form (submit)=\\\"onLogin()\\\" #form=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"username\\\">Username</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"userDetails.username\\\" #username=\\\"ngModel\\\" required/>\\r\\n                <span *ngIf=\\\"username.touched && username.invalid && username.errors.required\\\">Username is required</span>\\r\\n              </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"userDetails.password\\\" #password=\\\"ngModel\\\" required />\\r\\n                <span *ngIf=\\\"password.touched && password.invalid && password.errors.required\\\">Password is required</span>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <input type=\\\"submit\\\" class=\\\"btn btn-success\\\" value=\\\"Login\\\" [disabled]=\\\"form.invalid\\\" />\\r\\n                <a routerLink=\\\"/\\\" class=\\\"btn btn-default\\\">Cancel</a>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from 'AngularApp/app/shared/data.service';\nimport { LoginService } from 'AngularApp/app/shared/login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-movie-login',\n  templateUrl: './movie-login.component.html',\n  styleUrls: ['./movie-login.component.css']\n})\nexport class MovieLoginComponent implements OnInit {\n\n    constructor(private dataService: DataService, private router: Router, private loginService: LoginService ) { }\n\n    errorMsg:string = \"\";\n    userDetails = {\n        username: '',\n        password: ''\n    }\n\n  ngOnInit() {\n  }\n\n    onLogin() {\n        this.dataService.login(this.userDetails)\n            .subscribe(success => {\n                if (success) {\n                    this.loginService.setUserLoggedIn();\n                    if (this.dataService.movieOrder.items.length > 0) {\n                        this.router.navigate(['checkout']);\n                    } else {\n                        this.router.navigate(['/']);\n                    }\n                }\n                },\n                error => {\n                    this.errorMsg = \"Failed to login!\";\n                });\n    }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <h3>{{title}}</h3>\\r\\n        <app-movie-list></app-movie-list>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <div class=\\\"well well-sm\\\">\\r\\n            <app-movie-cart></app-movie-cart>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-movie-shop',\n  templateUrl: './movie-shop.component.html',\n  styleUrls: ['./movie-shop.component.css']\n})\nexport class MovieShopComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}